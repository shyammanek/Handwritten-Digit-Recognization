{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","dependencies":[{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\htr-final\\package.json","includedInParent":true,"mtime":1603094551417},{"name":"E:\\htr-final\\.babelrc","includedInParent":true,"mtime":1603022514142},{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1603088140582},{"name":"../environment","loc":{"line":38,"column":28},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\environment.js"},{"name":"../tensor","loc":{"line":39,"column":23},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\tensor.js"},{"name":"../tensor_util_env","loc":{"line":40,"column":32},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\tensor_util_env.js"},{"name":"../util","loc":{"line":41,"column":19},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\util.js"},{"name":"./axis_util","loc":{"line":42,"column":26},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\axis_util.js"},{"name":"./concat_split","loc":{"line":43,"column":29},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\concat_split.js"},{"name":"./operation","loc":{"line":44,"column":26},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\operation.js"},{"name":"./rand","loc":{"line":45,"column":21},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\rand.js"},{"name":"./tensor_ops","loc":{"line":46,"column":27},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\tensor_ops.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar tensor_1 = require(\"../tensor\");\nvar tensor_util_env_1 = require(\"../tensor_util_env\");\nvar util = require(\"../util\");\nvar axis_util_1 = require(\"./axis_util\");\nvar concat_split_1 = require(\"./concat_split\");\nvar operation_1 = require(\"./operation\");\nvar rand_1 = require(\"./rand\");\nvar tensor_ops_1 = require(\"./tensor_ops\");\nfunction clone_(x) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'clone');\n    var der = function (dy) {\n        return { $x: function () { return dy.toFloat(); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) {\n        return tensor_1.Tensor.make($x.shape, { dataId: $x.dataId }, $x.dtype);\n    }, { $x: $x }, der);\n}\nfunction eye_(numRows, numColumns, batchShape, dtype) {\n    if (dtype === void 0) { dtype = 'float32'; }\n    if (numColumns == null) {\n        numColumns = numRows;\n    }\n    var buff = buffer([numRows, numColumns], dtype);\n    var n = numRows <= numColumns ? numRows : numColumns;\n    for (var i = 0; i < n; ++i) {\n        buff.set(1, i, i);\n    }\n    var out = buff.toTensor().as2D(numRows, numColumns);\n    if (batchShape == null) {\n        return out;\n    }\n    else {\n        if (batchShape.length === 1) {\n            return exports.tile(exports.expandDims(out, 0), [batchShape[0], 1, 1]);\n        }\n        else if (batchShape.length === 2) {\n            return exports.tile(exports.expandDims(exports.expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n        }\n        else if (batchShape.length === 3) {\n            return exports.tile(exports.expandDims(exports.expandDims(exports.expandDims(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n        }\n        else {\n            throw new Error(\"eye() currently supports only 1D and 2D \" +\n                (\"batchShapes, but received \" + batchShape.length + \"D.\"));\n        }\n    }\n}\nfunction randomNormal_(shape, mean, stdDev, dtype, seed) {\n    if (mean === void 0) { mean = 0; }\n    if (stdDev === void 0) { stdDev = 1; }\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(\"Unsupported data type \" + dtype);\n    }\n    var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, false, seed);\n    var res = buffer(shape, dtype);\n    for (var i = 0; i < res.values.length; i++) {\n        res.values[i] = randGauss.nextValue();\n    }\n    return res.toTensor();\n}\nfunction truncatedNormal_(shape, mean, stdDev, dtype, seed) {\n    if (mean === void 0) { mean = 0; }\n    if (stdDev === void 0) { stdDev = 1; }\n    if (dtype != null && dtype === 'bool') {\n        throw new Error(\"Unsupported data type \" + dtype);\n    }\n    var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, true, seed);\n    var res = buffer(shape, dtype);\n    for (var i = 0; i < res.values.length; i++) {\n        res.values[i] = randGauss.nextValue();\n    }\n    return res.toTensor();\n}\nfunction randomUniform_(shape, minval, maxval, dtype) {\n    if (minval === void 0) { minval = 0; }\n    if (maxval === void 0) { maxval = 1; }\n    if (dtype === void 0) { dtype = 'float32'; }\n    var res = buffer(shape, dtype);\n    for (var i = 0; i < res.values.length; i++) {\n        res.values[i] = util.randUniform(minval, maxval);\n    }\n    return res.toTensor();\n}\nfunction rand_(shape, randFunction, dtype) {\n    var size = util.sizeFromShape(shape);\n    var values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(\"Unknown data type \" + dtype);\n    }\n    for (var i = 0; i < size; i++) {\n        values[i] = randFunction();\n    }\n    return tensor_1.Tensor.make(shape, { values: values }, dtype);\n}\nfunction multinomial_(logits, numSamples, seed, normalized) {\n    if (normalized === void 0) { normalized = false; }\n    var $logits = tensor_util_env_1.convertToTensor(logits, 'logits', 'multinomial');\n    var numOutcomes = $logits.size;\n    var origRank = $logits.rank;\n    if (numOutcomes < 2) {\n        throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" +\n            (numOutcomes + \".\"));\n    }\n    if (origRank > 2) {\n        throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + origRank);\n    }\n    seed = seed || Math.random();\n    var logits2D = origRank === 1 ? $logits.as2D(1, -1) : $logits;\n    var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.multinomial(logits2D, normalized, numSamples, seed); }, { logits2D: logits2D });\n    return origRank === 1 ? res.as1D() : res;\n}\nfunction oneHot_(indices, depth, onValue, offValue) {\n    if (onValue === void 0) { onValue = 1; }\n    if (offValue === void 0) { offValue = 0; }\n    var $indices = tensor_util_env_1.convertToTensor(indices, 'indices', 'oneHot', 'int32');\n    util.assert($indices.dtype === 'int32', 'Indices must be of dtype `int32`');\n    if (depth < 2) {\n        throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + depth);\n    }\n    var grad = function (dy) {\n        return { $indices: function () { return tensor_ops_1.zerosLike($indices); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.oneHot($indices, depth, onValue, offValue); }, { $indices: $indices }, grad);\n}\nfunction fromPixels_(pixels, numChannels) {\n    if (numChannels === void 0) { numChannels = 3; }\n    if (numChannels > 4) {\n        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n    }\n    return environment_1.ENV.engine.fromPixels(pixels, numChannels);\n}\nfunction toPixels(img, canvas) {\n    return __awaiter(this, void 0, void 0, function () {\n        var $img, _a, height, width, depth, minTensor, maxTensor, min, max, data, multiplier, bytes, i, r, g, b, a, j, ctx, imageData;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    $img = tensor_util_env_1.convertToTensor(img, 'img', 'toPixels', 'int32');\n                    if ($img.rank !== 2 && $img.rank !== 3) {\n                        throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \" + $img.rank + \".\");\n                    }\n                    _a = $img.shape.slice(0, 2), height = _a[0], width = _a[1];\n                    depth = $img.rank === 2 ? 1 : $img.shape[2];\n                    if (depth > 4 || depth === 2) {\n                        throw new Error(\"toPixels only supports depth of size \" +\n                            (\"1, 3 or 4 but got \" + depth));\n                    }\n                    minTensor = $img.min();\n                    maxTensor = $img.max();\n                    return [4, minTensor.data()];\n                case 1:\n                    min = (_b.sent())[0];\n                    return [4, maxTensor.data()];\n                case 2:\n                    max = (_b.sent())[0];\n                    minTensor.dispose();\n                    maxTensor.dispose();\n                    if ($img.dtype === 'float32') {\n                        if (min < 0 || max > 1) {\n                            throw new Error(\"Tensor values for a float32 Tensor must be in the \" +\n                                (\"range [0 - 1] but got range [\" + min + \" - \" + max + \"].\"));\n                        }\n                    }\n                    else if ($img.dtype === 'int32') {\n                        if (min < 0 || max > 255) {\n                            throw new Error(\"Tensor values for a int32 Tensor must be in the \" +\n                                (\"range [0 - 255] but got range [\" + min + \" - \" + max + \"].\"));\n                        }\n                    }\n                    else {\n                        throw new Error(\"Unsupported type for toPixels: \" + $img.dtype + \".\" +\n                            \" Please use float32 or int32 tensors.\");\n                    }\n                    return [4, $img.data()];\n                case 3:\n                    data = _b.sent();\n                    multiplier = $img.dtype === 'float32' ? 255 : 1;\n                    bytes = new Uint8ClampedArray(width * height * 4);\n                    for (i = 0; i < height * width; ++i) {\n                        r = void 0, g = void 0, b = void 0, a = void 0;\n                        if (depth === 1) {\n                            r = data[i] * multiplier;\n                            g = data[i] * multiplier;\n                            b = data[i] * multiplier;\n                            a = 255;\n                        }\n                        else if (depth === 3) {\n                            r = data[i * 3] * multiplier;\n                            g = data[i * 3 + 1] * multiplier;\n                            b = data[i * 3 + 2] * multiplier;\n                            a = 255;\n                        }\n                        else if (depth === 4) {\n                            r = data[i * 4] * multiplier;\n                            g = data[i * 4 + 1] * multiplier;\n                            b = data[i * 4 + 2] * multiplier;\n                            a = data[i * 4 + 3] * multiplier;\n                        }\n                        j = i * 4;\n                        bytes[j + 0] = Math.round(r);\n                        bytes[j + 1] = Math.round(g);\n                        bytes[j + 2] = Math.round(b);\n                        bytes[j + 3] = Math.round(a);\n                    }\n                    if (canvas != null) {\n                        canvas.width = width;\n                        canvas.height = height;\n                        ctx = canvas.getContext('2d');\n                        imageData = new ImageData(bytes, width, height);\n                        ctx.putImageData(imageData, 0, 0);\n                    }\n                    if ($img !== img) {\n                        $img.dispose();\n                    }\n                    return [2, bytes];\n            }\n        });\n    });\n}\nexports.toPixels = toPixels;\nfunction reshape_(x, shape) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'reshape');\n    shape = util.inferFromImplicitShape(shape, $x.size);\n    util.assert($x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');\n    var grad = function (dy) {\n        return { $x: function () { return dy.reshape($x.shape); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.reshape($x, shape); }, { $x: $x }, grad);\n}\nfunction squeeze_(x, axis) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'squeeze');\n    return exports.reshape($x, util.squeezeShape($x.shape, axis).newShape);\n}\nfunction cast_(x, dtype) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'cast');\n    var grad = function (dy) {\n        return { $x: function () { return dy.clone(); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.cast($x, dtype); }, { $x: $x }, grad);\n}\nfunction tile_(x, reps) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'tile');\n    util.assert($x.rank === reps.length, \"Error in transpose: rank of input \" + $x.rank + \" \" +\n        (\"must match length of reps \" + reps + \".\"));\n    var grad = function (dy) {\n        var derX = function () {\n            var xGrad = tensor_ops_1.zerosLike($x);\n            if ($x.rank === 1) {\n                for (var i = 0; i < reps[0]; ++i) {\n                    xGrad = xGrad.add(dy.slice([i * $x.shape[0]], [$x.shape[0]]));\n                }\n            }\n            else if ($x.rank === 2) {\n                for (var i = 0; i < reps[0]; ++i) {\n                    for (var j = 0; j < reps[1]; ++j) {\n                        xGrad = xGrad.add(dy.slice([i * $x.shape[0], j * $x.shape[1]], [$x.shape[0], $x.shape[1]]));\n                    }\n                }\n            }\n            else if ($x.rank === 3) {\n                for (var i = 0; i < reps[0]; ++i) {\n                    for (var j = 0; j < reps[1]; ++j) {\n                        for (var k = 0; k < reps[2]; ++k) {\n                            xGrad = xGrad.add(dy.slice([i * $x.shape[0], j * $x.shape[1], k * $x.shape[2]], [$x.shape[0], $x.shape[1], $x.shape[2]]));\n                        }\n                    }\n                }\n            }\n            else if ($x.rank === 4) {\n                for (var i = 0; i < reps[0]; ++i) {\n                    for (var j = 0; j < reps[1]; ++j) {\n                        for (var k = 0; k < reps[2]; ++k) {\n                            for (var l = 0; l < reps[3]; ++l) {\n                                xGrad = xGrad.add(dy.slice([\n                                    i * $x.shape[0], j * $x.shape[1], k * $x.shape[2],\n                                    l * $x.shape[3]\n                                ], [$x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]));\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error(\"Gradient for tile operation is not implemented for rank-\" +\n                    ($x.rank + \" tensors yet.\"));\n            }\n            return xGrad;\n        };\n        return { $x: derX };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.tile($x, reps); }, { $x: $x }, grad);\n}\nfunction pad1d_(x, paddings, constantValue) {\n    if (constantValue === void 0) { constantValue = 0; }\n    util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');\n    return exports.pad(x, [paddings], constantValue);\n}\nfunction pad2d_(x, paddings, constantValue) {\n    if (constantValue === void 0) { constantValue = 0; }\n    util.assert(paddings.length === 2 && paddings[0].length === 2 &&\n        paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n    return exports.pad(x, paddings, constantValue);\n}\nfunction pad3d_(x, paddings, constantValue) {\n    if (constantValue === void 0) { constantValue = 0; }\n    util.assert(paddings.length === 3 && paddings[0].length === 2 &&\n        paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n    return exports.pad(x, paddings, constantValue);\n}\nfunction pad4d_(x, paddings, constantValue) {\n    if (constantValue === void 0) { constantValue = 0; }\n    util.assert(paddings.length === 4 && paddings[0].length === 2 &&\n        paddings[1].length === 2 && paddings[2].length === 2 &&\n        paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n    return exports.pad(x, paddings, constantValue);\n}\nfunction pad_(x, paddings, constantValue) {\n    if (constantValue === void 0) { constantValue = 0; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'pad');\n    if ($x.rank === 0) {\n        throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n    }\n    var begin = paddings.map(function (p) { return p[0]; });\n    var grad = function (dy) {\n        return { $x: function () { return dy.slice(begin, $x.shape); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.pad($x, paddings, constantValue); }, { $x: $x }, grad);\n}\nfunction stack_(tensors, axis) {\n    if (axis === void 0) { axis = 0; }\n    var $tensors = tensor_util_env_1.convertToTensorArray(tensors, 'tensors', 'stack');\n    util.assert($tensors.length >= 1, 'Pass at least one tensor to tf.stack');\n    if ($tensors.length === 1) {\n        return $tensors[0].expandDims(axis);\n    }\n    var rank = $tensors[0].rank;\n    var shape = $tensors[0].shape;\n    var dtype = $tensors[0].dtype;\n    util.assert(axis <= rank, 'Axis must be <= rank of the tensor');\n    $tensors.forEach(function (t) {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    });\n    $tensors.forEach(function (t) {\n        util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');\n    });\n    var expandedTensors = $tensors.map(function (t) { return t.expandDims(axis); });\n    return concat_split_1.concat(expandedTensors, axis);\n}\nfunction batchToSpaceND_(x, blockShape, crops) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'batchToSpaceND');\n    var prod = blockShape.reduce(function (a, b) { return a * b; });\n    util.assert($x.rank >= 1 + blockShape.length, \"input rank should be > than [blockShape] but got \" + $x.rank);\n    util.assert(crops.length === blockShape.length, \"crops.shape[0] must be equal to [blockShape] but got \" + crops.length);\n    util.assert($x.shape[0] % prod === 0, \"input tensor batch must be divisible by prod( blockShape )\");\n    var grad = function (dy) {\n        return { $x: function () { return dy.spaceToBatchND(blockShape, crops); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.batchToSpaceND($x, blockShape, crops); }, { $x: $x }, grad);\n}\nfunction spaceToBatchND_(x, blockShape, paddings) {\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'spaceToBatchND');\n    util.assert($x.rank >= 1 + blockShape.length, \"input rank \" + $x.rank + \" should be > than [blockShape] \" + blockShape.length);\n    util.assert(paddings.length === blockShape.length, \"paddings.shape[0] \" + paddings.length + \" must be equal to [blockShape] \" + blockShape.length);\n    util.assert($x.shape.reduce(function (a, b, i) {\n        if (i > 0 && i <= blockShape.length) {\n            return a &&\n                ((b + paddings[i - 1][0] + paddings[i - 1][1]) %\n                    blockShape[i - 1] ===\n                    0);\n        }\n        return a;\n    }, true), \"input spatial dimensions \" + $x.shape.slice(1) + \" with paddings \" + paddings.toString() + \" must be divisible by blockShapes \" + blockShape.toString());\n    var grad = function (dy) {\n        return { $x: function () { return dy.batchToSpaceND(blockShape, paddings); } };\n    };\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.spaceToBatchND($x, blockShape, paddings); }, { $x: $x }, grad);\n}\nfunction unstack_(x, axis) {\n    if (axis === void 0) { axis = 0; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'unstack');\n    var num = $x.shape[axis];\n    var outputShape = Array($x.rank - 1).fill(0);\n    var outIndex = 0;\n    for (var i = 0; i < $x.rank; i++) {\n        if (i !== axis) {\n            outputShape[outIndex] = $x.shape[i];\n            outIndex++;\n        }\n    }\n    var splitSizes;\n    splitSizes = Array(num).fill(1);\n    var begin = Array($x.rank).fill(0);\n    var size = $x.shape.slice();\n    return splitSizes.map(function (s) {\n        size[axis] = s;\n        var slice = $x.slice(begin, size);\n        begin[axis] += s;\n        return slice.reshape(outputShape);\n    });\n}\nfunction cumsum_(x, axis, exclusive, reverse) {\n    if (axis === void 0) { axis = 0; }\n    if (exclusive === void 0) { exclusive = false; }\n    if (reverse === void 0) { reverse = false; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'cumsum');\n    axis = axis | 0;\n    var permutation = axis_util_1.getAxesPermutation([axis], $x.rank);\n    var permutedX = $x;\n    if (permutation != null) {\n        permutedX = $x.transpose(permutation);\n    }\n    var permutedAxis = axis_util_1.getInnerMostAxes(1, $x.rank)[0];\n    var grad = function (dy) {\n        return { permutedX: function () { return dy.cumsum(axis, exclusive, !reverse); } };\n    };\n    var value = environment_1.ENV.engine.runKernel(function (backend) { return backend.cumsum(permutedX, permutedAxis, exclusive, reverse); }, { permutedX: permutedX }, grad);\n    if (permutation != null) {\n        value = value.transpose(permutation);\n    }\n    return value;\n}\nfunction expandDims_(x, axis) {\n    if (axis === void 0) { axis = 0; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'expandDims');\n    util.assert(axis <= $x.rank, 'Axis must be <= rank of the tensor');\n    var newShape = $x.shape.slice();\n    if (axis < 0) {\n        util.assert(-($x.rank + 1) <= axis, \"Axis must be in the interval [\" + -($x.rank + 1) + \", \" + $x.rank + \"]\");\n        axis = $x.rank + axis + 1;\n    }\n    newShape.splice(axis, 0, 1);\n    return exports.reshape($x, newShape);\n}\nfunction depthToSpace_(x, blockSize, dataFormat) {\n    if (dataFormat === void 0) { dataFormat = 'NHWC'; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'depthToSpace');\n    var inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n    var inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n    var inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n    util.assert(inputHeight * blockSize >= 0, \"Negative dimension size caused by overflow when multiplying\\n      \" + inputHeight + \" and \" + blockSize + \"  for depthToSpace with input shape\\n      \" + $x.shape);\n    util.assert(inputWidth * blockSize >= 0, \"Negative dimension size caused by overflow when multiplying\\n      \" + inputWidth + \" and \" + blockSize + \" for depthToSpace with input shape\\n          \" + $x.shape);\n    util.assert((inputDepth % (blockSize * blockSize) === 0), \"Dimension size must be evenly divisible by \" + blockSize * blockSize + \" but is \" + inputDepth + \" for depthToSpace with input shape \" + $x.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) { return backend.depthToSpace($x, blockSize, dataFormat); }, { $x: $x });\n}\nfunction buffer(shape, dtype, values) {\n    if (dtype === void 0) { dtype = 'float32'; }\n    return new tensor_1.TensorBuffer(shape, dtype, values);\n}\nexports.buffer = buffer;\nfunction print(x, verbose) {\n    if (verbose === void 0) { verbose = false; }\n    console.log(x.toString(verbose));\n}\nexports.print = print;\nexports.batchToSpaceND = operation_1.op({ batchToSpaceND_: batchToSpaceND_ });\nexports.cast = operation_1.op({ cast_: cast_ });\nexports.clone = operation_1.op({ clone_: clone_ });\nexports.cumsum = operation_1.op({ cumsum_: cumsum_ });\nexports.depthToSpace = operation_1.op({ depthToSpace_: depthToSpace_ });\nexports.expandDims = operation_1.op({ expandDims_: expandDims_ });\nexports.eye = operation_1.op({ eye_: eye_ });\nexports.fromPixels = operation_1.op({ fromPixels_: fromPixels_ });\nexports.multinomial = operation_1.op({ multinomial_: multinomial_ });\nexports.oneHot = operation_1.op({ oneHot_: oneHot_ });\nexports.pad = operation_1.op({ pad_: pad_ });\nexports.pad1d = operation_1.op({ pad1d_: pad1d_ });\nexports.pad2d = operation_1.op({ pad2d_: pad2d_ });\nexports.pad3d = operation_1.op({ pad3d_: pad3d_ });\nexports.pad4d = operation_1.op({ pad4d_: pad4d_ });\nexports.rand = operation_1.op({ rand_: rand_ });\nexports.randomNormal = operation_1.op({ randomNormal_: randomNormal_ });\nexports.randomUniform = operation_1.op({ randomUniform_: randomUniform_ });\nexports.reshape = operation_1.op({ reshape_: reshape_ });\nexports.spaceToBatchND = operation_1.op({ spaceToBatchND_: spaceToBatchND_ });\nexports.squeeze = operation_1.op({ squeeze_: squeeze_ });\nexports.stack = operation_1.op({ stack_: stack_ });\nexports.tile = operation_1.op({ tile_: tile_ });\nexports.truncatedNormal = operation_1.op({ truncatedNormal_: truncatedNormal_ });\nexports.unstack = operation_1.op({ unstack_: unstack_ });\n"},"sourceMaps":{"js":{"version":3,"file":"array_ops.js","sourceRoot":"","sources":["../../src/ops/array_ops.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,8CAAmC;AACnC,oCAAuF;AACvF,sDAAyE;AAEzE,8BAAgC;AAChC,yCAAiE;AACjE,+CAAsC;AACtC,yCAA+B;AAC/B,+BAAmC;AACnC,2CAAuC;AAevC,gBAAkC,CAAe;IAC/C,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAC5C,IAAM,GAAG,GAAG,UAAC,EAAK;QAChB,OAAO,EAAC,EAAE,EAAE,cAAM,OAAA,EAAE,CAAC,OAAO,EAAE,EAAZ,CAAY,EAAC,CAAC;IAClC,CAAC,CAAC;IAEF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CAChB,UAAA,OAAO;QACH,OAAA,eAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,EAAE,CAAC,MAAM,EAAC,EAAE,EAAE,CAAC,KAAK,CAAM;IAAzD,CAAyD,EAC7D,EAAC,EAAE,IAAA,EAAC,EAAE,GAAG,CAAM,CAAC;AAC7B,CAAC;AAeD,cACI,OAAe,EAAE,UAAmB,EACpC,UAIwE,EACxE,KAA2B;IAA3B,sBAAA,EAAA,iBAA2B;IAC7B,IAAI,UAAU,IAAI,IAAI,EAAE;QACtB,UAAU,GAAG,OAAO,CAAC;KACtB;IACD,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,CAAC;IAClD,IAAM,CAAC,GAAG,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC;IACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;QAC1B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACnB;IACD,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACtD,IAAI,UAAU,IAAI,IAAI,EAAE;QACtB,OAAO,GAAG,CAAC;KACZ;SAAM;QACL,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO,YAAI,CAAC,kBAAU,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACxD;aAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,YAAI,CACP,kBAAU,CAAC,kBAAU,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EACjC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC3C;aAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,YAAI,CACP,kBAAU,CAAC,kBAAU,CAAC,kBAAU,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAChD,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC1D;aAAM;YACL,MAAM,IAAI,KAAK,CACX,0CAA0C;iBAE1C,+BAA8B,UAAkB,CAAC,MAAM,OAAI,CAAA,CAAC,CAAC;SAClE;KACF;AACH,CAAC;AAgBD,uBACI,KAAkB,EAAE,IAAQ,EAAE,MAAU,EAAE,KAAyB,EACnE,IAAa;IADO,qBAAA,EAAA,QAAQ;IAAE,uBAAA,EAAA,UAAU;IAE1C,IAAI,KAAK,IAAI,IAAI,IAAK,KAAkB,KAAK,MAAM,EAAE;QACnD,MAAM,IAAI,KAAK,CAAC,2BAAyB,KAAO,CAAC,CAAC;KACnD;IACD,IAAM,SAAS,GACX,IAAI,kBAAW,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAkB,IAAI,CAAC,CAAC;IACtE,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;KACvC;IACD,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC;AAqBD,0BACI,KAAkB,EAAE,IAAQ,EAAE,MAAU,EAAE,KAAyB,EACnE,IAAa;IADO,qBAAA,EAAA,QAAQ;IAAE,uBAAA,EAAA,UAAU;IAE1C,IAAI,KAAK,IAAI,IAAI,IAAK,KAAkB,KAAK,MAAM,EAAE;QACnD,MAAM,IAAI,KAAK,CAAC,2BAAyB,KAAO,CAAC,CAAC;KACnD;IACD,IAAM,SAAS,GACX,IAAI,kBAAW,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAkB,IAAI,CAAC,CAAC;IACrE,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;KACvC;IACD,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC;AAqBD,wBACI,KAAkB,EAAE,MAAU,EAAE,MAAU,EAC1C,KAA2B;IADP,uBAAA,EAAA,UAAU;IAAE,uBAAA,EAAA,UAAU;IAC1C,sBAAA,EAAA,iBAA2B;IAC7B,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAClD;IACD,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC;AAWD,eACI,KAAkB,EAAE,YAA0B,EAC9C,KAAgB;IAClB,IAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAEvC,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;QACxC,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;KACjC;SAAM,IAAI,KAAK,KAAK,OAAO,EAAE;QAC5B,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;KAC/B;SAAM,IAAI,KAAK,KAAK,MAAM,EAAE;QAC3B,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;KAC/B;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,uBAAqB,KAAO,CAAC,CAAC;KAC/C;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;QAC7B,MAAM,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,CAAC;KAC5B;IACD,OAAO,eAAM,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,MAAM,QAAA,EAAC,EAAE,KAAK,CAAC,CAAC;AAC7C,CAAC;AAqBD,sBACI,MAAoC,EAAE,UAAkB,EAAE,IAAa,EACvE,UAAkB;IAAlB,2BAAA,EAAA,kBAAkB;IACpB,IAAM,OAAO,GAAG,iCAAe,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IACjE,IAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC;IACjC,IAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC;IAC9B,IAAI,WAAW,GAAG,CAAC,EAAE;QACnB,MAAM,IAAI,KAAK,CACX,8DAA8D;aAC3D,WAAW,MAAG,CAAA,CAAC,CAAC;KACxB;IACD,IAAI,QAAQ,GAAG,CAAC,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,kDAAgD,QAAU,CAAC,CAAC;KAC7E;IACD,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;IAC7B,IAAM,QAAQ,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAmB,CAAC;IAC5E,IAAM,GAAG,GAAG,iBAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,EAA3D,CAA2D,EACtE,EAAC,QAAQ,UAAA,EAAC,CAAC,CAAC;IAEhB,OAAO,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;AAC3C,CAAC;AAmBD,iBACI,OAA8B,EAAE,KAAa,EAAE,OAAW,EAC1D,QAAY;IADmC,wBAAA,EAAA,WAAW;IAC1D,yBAAA,EAAA,YAAY;IACd,IAAM,QAAQ,GAAG,iCAAe,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACxE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,KAAK,OAAO,EAAE,kCAAkC,CAAC,CAAC;IAE5E,IAAI,KAAK,GAAG,CAAC,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,mDAAiD,KAAO,CAAC,CAAC;KAC3E;IACD,IAAM,IAAI,GAAG,UAAC,EAAY;QACxB,OAAO,EAAC,QAAQ,EAAE,cAAM,OAAA,sBAAS,CAAC,QAAQ,CAAC,EAAnB,CAAmB,EAAC,CAAC;IAC/C,CAAC,CAAC;IACF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CACvB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAlD,CAAkD,EAAE,EAAC,QAAQ,UAAA,EAAC,EACzE,IAAI,CAAC,CAAC;AACZ,CAAC;AAsBD,qBACI,MAAqE,EACrE,WAAe;IAAf,4BAAA,EAAA,eAAe;IACjB,IAAI,WAAW,GAAG,CAAC,EAAE;QACnB,MAAM,IAAI,KAAK,CACX,gEAAgE,CAAC,CAAC;KACvE;IACD,OAAO,iBAAG,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACpD,CAAC;AAoBD,kBACI,GAAiC,EACjC,MAA0B;;;;;;oBACtB,IAAI,GAAG,iCAAe,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;oBAC9D,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;wBACtC,MAAM,IAAI,KAAK,CACX,0DAAwD,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;qBAC3E;oBACK,KAAkB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAvC,MAAM,QAAA,EAAE,KAAK,QAAA,CAA2B;oBACzC,KAAK,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElD,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;wBAC5B,MAAM,IAAI,KAAK,CACX,uCAAuC;6BACvC,uBAAqB,KAAO,CAAA,CAAC,CAAC;qBACnC;oBAEK,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBACvB,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAChB,WAAM,SAAS,CAAC,IAAI,EAAE,EAAA;;oBAA7B,GAAG,GAAG,CAAC,SAAsB,CAAC,CAAC,CAAC,CAAC;oBAC1B,WAAM,SAAS,CAAC,IAAI,EAAE,EAAA;;oBAA7B,GAAG,GAAG,CAAC,SAAsB,CAAC,CAAC,CAAC,CAAC;oBACvC,SAAS,CAAC,OAAO,EAAE,CAAC;oBACpB,SAAS,CAAC,OAAO,EAAE,CAAC;oBACpB,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;wBAC5B,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;4BACtB,MAAM,IAAI,KAAK,CACX,oDAAoD;iCACpD,kCAAgC,GAAG,WAAM,GAAG,OAAI,CAAA,CAAC,CAAC;yBACvD;qBACF;yBAAM,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE;wBACjC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE;4BACxB,MAAM,IAAI,KAAK,CACX,kDAAkD;iCAClD,oCAAkC,GAAG,WAAM,GAAG,OAAI,CAAA,CAAC,CAAC;yBACzD;qBACF;yBAAM;wBACL,MAAM,IAAI,KAAK,CACX,oCAAkC,IAAI,CAAC,KAAK,MAAG;4BAC/C,uCAAuC,CAAC,CAAC;qBAC9C;oBAEY,WAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBAAxB,IAAI,GAAG,SAAiB;oBACxB,UAAU,GAAG,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChD,KAAK,GAAG,IAAI,iBAAiB,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;oBAExD,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;wBACnC,CAAC,SAAA,EAAE,CAAC,SAAA,EAAE,CAAC,SAAA,EAAE,CAAC,SAAA,CAAC;wBACf,IAAI,KAAK,KAAK,CAAC,EAAE;4BACf,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BACzB,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BACzB,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BACzB,CAAC,GAAG,GAAG,CAAC;yBACT;6BAAM,IAAI,KAAK,KAAK,CAAC,EAAE;4BACtB,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;4BAC7B,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;4BACjC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;4BACjC,CAAC,GAAG,GAAG,CAAC;yBACT;6BAAM,IAAI,KAAK,KAAK,CAAC,EAAE;4BACtB,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;4BAC7B,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;4BACjC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;4BACjC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;yBAClC;wBAEK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBAChB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC7B,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC9B;oBAED,IAAI,MAAM,IAAI,IAAI,EAAE;wBAClB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;wBACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;wBACjB,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBAC9B,SAAS,GAAG,IAAI,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;wBACtD,GAAG,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBACnC;oBACD,IAAI,IAAI,KAAK,GAAG,EAAE;wBAChB,IAAI,CAAC,OAAO,EAAE,CAAC;qBAChB;oBACD,WAAO,KAAK,EAAC;;;;CACd;AA6rBC,4BAAQ;AAlqBV,kBACI,CAAoB,EAAE,KAAmB;IAC3C,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IAC9C,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACpD,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EACrC,gEAAgE,CAAC,CAAC;IAEtE,IAAM,IAAI,GAAG,UAAC,EAAc;QAC1B,OAAO,EAAC,EAAE,EAAE,cAAM,OAAA,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAApB,CAAoB,EAAC,CAAC;IAC1C,CAAC,CAAC;IACF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CACvB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,EAA1B,CAA0B,EAAE,EAAC,EAAE,IAAA,EAAC,EAAE,IAAI,CAAC,CAAC;AACzD,CAAC;AAgBD,kBAAoC,CAAoB,EAAE,IAAe;IACvE,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IAC9C,OAAO,eAAO,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAM,CAAC;AACtE,CAAC;AAaD,eAAiC,CAAe,EAAE,KAAe;IAC/D,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IAE3C,IAAM,IAAI,GAAG,UAAC,EAAK;QACjB,OAAO,EAAC,EAAE,EAAE,cAAM,OAAA,EAAE,CAAC,KAAK,EAAE,EAAV,CAAU,EAAC,CAAC;IAChC,CAAC,CAAC;IACF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,EAAvB,CAAuB,EAAE,EAAC,EAAE,IAAA,EAAC,EAAE,IAAI,CACrE,CAAC;AACR,CAAC;AA0BD,eAAiC,CAAe,EAAE,IAAc;IAC9D,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IAE3C,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EACvB,uCAAqC,EAAE,CAAC,IAAI,MAAG;SAC3C,+BAA6B,IAAI,MAAG,CAAA,CAAC,CAAC;IAC9C,IAAM,IAAI,GAAG,UAAC,EAAK;QACjB,IAAM,IAAI,GAAG;YACX,IAAI,KAAK,GAAG,sBAAS,CAAC,EAAE,CAAC,CAAC;YAG1B,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;gBACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;oBAChC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC/D;aACF;iBAAM,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;oBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;wBAChC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CACtB,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAClC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClC;iBACF;aACF;iBAAM,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;oBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;wBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;4BAChC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CACtB,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EACnD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC/C;qBACF;iBACF;aACF;iBAAM,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;oBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;wBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;4BAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;gCAChC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CACtB;oCACE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;oCACjD,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;iCAChB,EACD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC5D;yBACF;qBACF;iBACF;aACF;iBAAM;gBACL,MAAM,IAAI,KAAK,CACX,0DAA0D;qBACvD,EAAE,CAAC,IAAI,kBAAe,CAAA,CAAC,CAAC;aAChC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QACF,OAAO,EAAC,EAAE,EAAE,IAAI,EAAC,CAAC;IACpB,CAAC,CAAC;IACF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAtB,CAAsB,EAAE,EAAC,EAAE,IAAA,EAAC,EAAE,IAAI,CAAC,CAAC;AAC7E,CAAC;AAKD,gBACI,CAAsB,EAAE,QAA0B,EAClD,aAAiB;IAAjB,8BAAA,EAAA,iBAAiB;IACnB,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,MAAM,KAAK,CAAC,EACrB,kDAAkD,CAAC,CAAC;IACxD,OAAO,WAAG,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,CAAC;AAC3C,CAAC;AAKD,gBACI,CAAsB,EAAE,QAA8C,EACtE,aAAiB;IAAjB,8BAAA,EAAA,iBAAiB;IACnB,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;QAC7C,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAC5B,uDAAuD,CAAC,CAAC;IAC7D,OAAO,WAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;AACzC,CAAC;AAKD,gBACI,CAAsB,EACtB,QAAgE,EAChE,aAAiB;IAAjB,8BAAA,EAAA,iBAAiB;IACnB,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;QAC7C,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EACxD,uDAAuD,CAAC,CAAC;IAC7D,OAAO,WAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;AACzC,CAAC;AAKD,gBACI,CAAsB,EACtB,QAIK,EACL,aAAiB;IAAjB,8BAAA,EAAA,iBAAiB;IACnB,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;QAC7C,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;QACpD,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAC5B,uDAAuD,CAAC,CAAC;IAC7D,OAAO,WAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;AACzC,CAAC;AAyBD,cACI,CAAe,EAAE,QAAiC,EAAE,aAAiB;IAAjB,8BAAA,EAAA,iBAAiB;IACvE,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAE1C,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;QACjB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;KACvE;IAGD,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,EAAJ,CAAI,CAAC,CAAC;IACtC,IAAM,IAAI,GAAG,UAAC,EAAK;QACjB,OAAO,EAAC,EAAE,EAAE,cAAM,OAAA,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAzB,CAAyB,EAAC,CAAC;IAC/C,CAAC,CAAC;IACF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CAChB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,EAAE,aAAa,CAAC,EAAxC,CAAwC,EAAE,EAAC,EAAE,IAAA,EAAC,EAAE,IAAI,CACrE,CAAC;AACR,CAAC;AAgBD,gBAAkC,OAAyB,EAAE,IAAQ;IAAR,qBAAA,EAAA,QAAQ;IACnE,IAAM,QAAQ,GAAG,sCAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAEnE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,sCAAsC,CAAC,CAAC;IAC1E,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACrC;IACD,IAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9B,IAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAChC,IAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAEhC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,EAAE,oCAAoC,CAAC,CAAC;IAEhE,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;QAChB,IAAI,CAAC,iBAAiB,CAClB,KAAK,EAAE,CAAC,CAAC,KAAK,EACd,uDAAuD,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;QAChB,IAAI,CAAC,MAAM,CACP,KAAK,KAAK,CAAC,CAAC,KAAK,EACjB,uDAAuD,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IACH,IAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAC9D,OAAO,qBAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACvC,CAAC;AAkDD,yBACI,CAAe,EAAE,UAAoB,EAAE,KAAiB;IAC1D,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;IACrD,IAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;IAEhD,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,EAChC,sDAAoD,EAAE,CAAC,IAAM,CAAC,CAAC;IAEnE,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,EAClC,0DAAwD,KAAK,CAAC,MAAQ,CAAC,CAAC;IAE5E,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EACxB,4DAA4D,CAAC,CAAC;IAElE,IAAM,IAAI,GAAG,UAAC,EAAK;QACjB,OAAO,EAAC,EAAE,EAAE,cAAM,OAAA,EAAE,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,CAAC,EAApC,CAAoC,EAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CACvB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,EAA7C,CAA6C,EAAE,EAAC,EAAE,IAAA,EAAC,EAAE,IAAI,CAAC,CAAC;AAC5E,CAAC;AAmDD,yBACI,CAAe,EAAE,UAAoB,EAAE,QAAoB;IAC7D,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC;IAErD,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,EAChC,gBAAc,EAAE,CAAC,IAAI,uCACjB,UAAU,CAAC,MAAQ,CAAC,CAAC;IAE7B,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,EACrC,uBAAqB,QAAQ,CAAC,MAAM,uCAChC,UAAU,CAAC,MAAQ,CAAC,CAAC;IAE7B,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,KAAK,CAAC,MAAM,CACX,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC;QACN,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,EAAE;YACnC,OAAO,CAAC;gBACJ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;oBACrB,CAAC,CAAC,CAAC;SACT;QACD,OAAO,CAAC,CAAC;IACX,CAAC,EACD,IAAI,CAAC,EACT,8BAA4B,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,uBACzC,QAAQ,CAAC,QAAQ,EAAE,0CACnB,UAAU,CAAC,QAAQ,EAAI,CAAC,CAAC;IAEjC,IAAM,IAAI,GAAG,UAAC,EAAK;QACjB,OAAO,EAAC,EAAE,EAAE,cAAM,OAAA,EAAE,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAvC,CAAuC,EAAC,CAAC;IAC7D,CAAC,CAAC;IAEF,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CACvB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAhD,CAAgD,EAAE,EAAC,EAAE,IAAA,EAAC,EAAE,IAAI,CAAC,CAAC;AAC/E,CAAC;AAeD,kBAAoC,CAAe,EAAE,IAAQ;IAAR,qBAAA,EAAA,QAAQ;IAC3D,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IAC9C,IAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3B,IAAM,WAAW,GAAa,KAAK,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzD,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI,CAAC,KAAK,IAAI,EAAE;YACd,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,QAAQ,EAAE,CAAC;SACZ;KACF;IAED,IAAI,UAAoB,CAAC;IACzB,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,IAAM,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrC,IAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAC9B,OAAO,UAAU,CAAC,GAAG,CAAC,UAAA,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACf,IAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC;AAwBD,iBACI,CAAoB,EAAE,IAAQ,EAAE,SAAiB,EAAE,OAAe;IAA5C,qBAAA,EAAA,QAAQ;IAAE,0BAAA,EAAA,iBAAiB;IAAE,wBAAA,EAAA,eAAe;IACpE,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAE7C,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;IAChB,IAAM,WAAW,GAAG,8BAAkB,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;KACvC;IACD,IAAM,YAAY,GAAG,4BAAgB,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAErD,IAAM,IAAI,GAAG,UAAC,EAAK;QACjB,OAAO,EAAC,SAAS,EAAE,cAAM,OAAA,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,EAApC,CAAoC,EAAC,CAAC;IACjE,CAAC,CAAC;IACF,IAAI,KAAK,GAAG,iBAAG,CAAC,MAAM,CAAC,SAAS,CAChB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CACrB,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,CAAC,EADrC,CACqC,EAChD,EAAC,SAAS,WAAA,EAAC,EAAE,IAAI,CAAM,CAAC;IAExC,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;KACtC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAiBD,qBACI,CAAoB,EAAE,IAAQ;IAAR,qBAAA,EAAA,QAAQ;IAChC,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;IAEjD,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,oCAAoC,CAAC,CAAC;IACnE,IAAM,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAClC,IAAI,IAAI,GAAG,CAAC,EAAE;QAEZ,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,EACtB,mCAAiC,CAAE,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,UAAK,EAAE,CAAC,IAAI,MAAG,CAAC,CAAC;QACrE,IAAI,GAAG,EAAE,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;KAC3B;IACD,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,OAAO,eAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;AAC/B,CAAC;AAsCD,uBACI,CAAwB,EAAE,SAAiB,EAC3C,UAAkC;IAAlC,2BAAA,EAAA,mBAAkC;IACpC,IAAM,EAAE,GAAG,iCAAe,CAAC,CAAC,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;IAEnD,IAAM,WAAW,GAAG,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxE,IAAM,UAAU,GAAG,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvE,IAAM,UAAU,GAAG,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEvE,IAAI,CAAC,MAAM,CACP,WAAW,GAAG,SAAS,IAAI,CAAC,EAC5B,wEACE,WAAW,aAAQ,SAAS,mDAC5B,EAAE,CAAC,KAAO,CAAC,CAAC;IAElB,IAAI,CAAC,MAAM,CACP,UAAU,GAAG,SAAS,IAAI,CAAC,EAC3B,wEACE,UAAU,aAAQ,SAAS,sDACvB,EAAE,CAAC,KAAO,CAAC,CAAC;IAEtB,IAAI,CAAC,MAAM,CACP,CAAC,UAAU,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAC5C,gDACI,SAAS,GAAG,SAAS,gBACrB,UAAU,2CAAsC,EAAE,CAAC,KAAO,CAAC,CAAC;IAEpE,OAAO,iBAAG,CAAC,MAAM,CAAC,SAAS,CACvB,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,EAAE,EAAE,SAAS,EAAE,UAAU,CAAC,EAA/C,CAA+C,EAAE,EAAC,EAAE,IAAA,EAAC,CAAC,CAAC;AACxE,CAAC;AA2BD,gBACI,KAAkB,EAAE,KAA2B,EAC/C,MAAmB;IADC,sBAAA,EAAA,iBAA2B;IAEjD,OAAO,IAAI,qBAAY,CAAI,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AACnD,CAAC;AAmBC,wBAAM;AALR,eAAiC,CAAI,EAAE,OAAe;IAAf,wBAAA,EAAA,eAAe;IACpD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AACnC,CAAC;AAKC,sBAAK;AAGM,QAAA,cAAc,GAAG,cAAE,CAAC,EAAC,eAAe,iBAAA,EAAC,CAAC,CAAC;AACvC,QAAA,IAAI,GAAG,cAAE,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,CAAC;AACnB,QAAA,KAAK,GAAG,cAAE,CAAC,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;AACrB,QAAA,MAAM,GAAG,cAAE,CAAC,EAAC,OAAO,SAAA,EAAC,CAAC,CAAC;AACvB,QAAA,YAAY,GAAG,cAAE,CAAC,EAAC,aAAa,eAAA,EAAC,CAAC,CAAC;AACnC,QAAA,UAAU,GAAG,cAAE,CAAC,EAAC,WAAW,aAAA,EAAC,CAAC,CAAC;AAC/B,QAAA,GAAG,GAAG,cAAE,CAAC,EAAC,IAAI,MAAA,EAAC,CAAC,CAAC;AACjB,QAAA,UAAU,GAAG,cAAE,CAAC,EAAC,WAAW,aAAA,EAAC,CAAC,CAAC;AAC/B,QAAA,WAAW,GAAG,cAAE,CAAC,EAAC,YAAY,cAAA,EAAC,CAAC,CAAC;AACjC,QAAA,MAAM,GAAG,cAAE,CAAC,EAAC,OAAO,SAAA,EAAC,CAAC,CAAC;AACvB,QAAA,GAAG,GAAG,cAAE,CAAC,EAAC,IAAI,MAAA,EAAC,CAAC,CAAC;AACjB,QAAA,KAAK,GAAG,cAAE,CAAC,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;AACrB,QAAA,KAAK,GAAG,cAAE,CAAC,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;AACrB,QAAA,KAAK,GAAG,cAAE,CAAC,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;AACrB,QAAA,KAAK,GAAG,cAAE,CAAC,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;AACrB,QAAA,IAAI,GAAG,cAAE,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,CAAC;AACnB,QAAA,YAAY,GAAG,cAAE,CAAC,EAAC,aAAa,eAAA,EAAC,CAAC,CAAC;AACnC,QAAA,aAAa,GAAG,cAAE,CAAC,EAAC,cAAc,gBAAA,EAAC,CAAC,CAAC;AACrC,QAAA,OAAO,GAAG,cAAE,CAAC,EAAC,QAAQ,UAAA,EAAC,CAAC,CAAC;AACzB,QAAA,cAAc,GAAG,cAAE,CAAC,EAAC,eAAe,iBAAA,EAAC,CAAC,CAAC;AACvC,QAAA,OAAO,GAAG,cAAE,CAAC,EAAC,QAAQ,UAAA,EAAC,CAAC,CAAC;AACzB,QAAA,KAAK,GAAG,cAAE,CAAC,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;AACrB,QAAA,IAAI,GAAG,cAAE,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,CAAC;AACnB,QAAA,eAAe,GAAG,cAAE,CAAC,EAAC,gBAAgB,kBAAA,EAAC,CAAC,CAAC;AACzC,QAAA,OAAO,GAAG,cAAE,CAAC,EAAC,QAAQ,UAAA,EAAC,CAAC,CAAC","sourcesContent":[null]}},"error":null,"hash":"fa084fdd534704c2fd6f87e01ad92d90","cacheData":{"env":{}}}