{"id":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","dependencies":[{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\shader_compiler.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\htr-final\\package.json","includedInParent":true,"mtime":1603094551417},{"name":"E:\\htr-final\\.babelrc","includedInParent":true,"mtime":1603022514142},{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1603088140582},{"name":"../../ops/broadcast_util","loc":{"line":3,"column":29},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\shader_compiler.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\broadcast_util.js"},{"name":"../../util","loc":{"line":4,"column":19},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\shader_compiler.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar broadcast_util = require(\"../../ops/broadcast_util\");\nvar util = require(\"../../util\");\nfunction makeShader(inputsInfo, outputShape, userCode, broadcast) {\n    var inputPrefixSnippet = inputsInfo.map(function (x) {\n        var size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        if (x.shapeInfo.isUniform) {\n            return \"uniform float \" + x.name + (size > 1 ? \"[\" + size + \"]\" : '') + \";\";\n        }\n        return \"uniform sampler2D \" + x.name + \";\";\n    });\n    inputPrefixSnippet = inputPrefixSnippet.join('\\n');\n    var inputSamplingSnippet = inputsInfo.map(function (x) { return getInputSamplingSnippet(x, outputShape, broadcast); })\n        .join('\\n');\n    var outTexShape = outputShape.texShape;\n    var outputSamplingSnippet;\n    if (outputShape.isPacked) {\n        outputSamplingSnippet =\n            getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    }\n    else {\n        outputSamplingSnippet =\n            getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    }\n    var source = [\n        SHADER_PREFIX, FLOAT_TEXTURE_SAMPLE_SNIPPET,\n        FLOAT_TEXTURE_SETOUTPUT_SNIPPET, inputPrefixSnippet, outputSamplingSnippet,\n        inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nexports.makeShader = makeShader;\nfunction getSamplerFromInInfo(inInfo) {\n    var shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(shape.length + \"-D input sampling\" +\n                \" is not yet supported\");\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, broadcast) {\n    var res = getSamplerFlat(inInfo);\n    res += getSamplerFromInInfo(inInfo);\n    if (broadcast ||\n        util.arraysEqual(inInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape)) {\n        res += getSamplerAtOutputCoords(inInfo, outShapeInfo, broadcast);\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape);\n        default:\n            throw new Error(outShape.length + \"-D output packed sampling is not yet supported\");\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(outShape.length + \"-D output sampling is not yet supported\");\n    }\n}\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\\n  int index = row * numC + col;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\\n    int stride1, int row, int col, int depth) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_4D_SNIPPET = \"\\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\\n    int stride1, int stride2, int row, int col, int depth,\\n    int depth2) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_5D_SNIPPET = \"\\nvec2 UVfrom5D(int texNumR, int texNumC, int stride0,\\n    int stride1, int stride2, int stride3, int row, int col, int depth,\\n    int depth2, int depth3) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 +\\n              depth * stride2 + depth2 * stride3 + depth3;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_6D_SNIPPET = \"\\nvec2 UVfrom6D(int texNumR, int texNumC, int stride0,\\n    int stride1, int stride2, int stride3, int stride4,\\n    int row, int col, int depth, int depth2, int depth3, int depth4) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2 *\\n    stride3 + depth3 * stride4 + depth4;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar FLOAT_TEXTURE_SAMPLE_SNIPPET = \"\\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n    return texture2D(textureSampler, uv).r;\\n  }\\n\";\nvar FLOAT_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  void setOutput(float val) {\\n    gl_FragColor = vec4(val, 0, 0, 0);\\n  }\\n\";\nvar SHADER_PREFIX = \"\\n  precision highp float;\\n  precision highp int;\\n  varying vec2 resultUV;\\n  const vec2 halfCR = vec2(0.5, 0.5);\\n\\n  struct ivec5\\n  {\\n    int x;\\n    int y;\\n    int z;\\n    int w;\\n    int u;\\n  };\\n\\n  struct ivec6\\n  {\\n    int x;\\n    int y;\\n    int z;\\n    int w;\\n    int u;\\n    int v;\\n  };\\n\\n  bool isNaN(float val) {\\n    return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\\n  }\\n\\n  bool hasNaN(vec4 values) {\\n    vec4 v1 = values * values;\\n    vec4 v2 = values * values;\\n    return any(notEqual(v1, v2));\\n  }\\n\\n  float getNaN(vec4 values) {\\n    return dot(vec4(1), values);\\n  }\\n\\n  int round(float value) {\\n    return int(floor(value + 0.5));\\n  }\\n\\n  int imod(int x, int y) {\\n    return x - y * (x / y);\\n  }\\n\\n  //Based on the work of Dave Hoskins\\n  //https://www.shadertoy.com/view/4djSRW\\n  #define HASHSCALE1 443.8975\\n  float random(float seed){\\n    vec2 p = resultUV * seed;\\n    vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n    p3 += dot(p3, p3.yzx + 19.19);\\n    return fract((p3.x + p3.y) * p3.z);\\n  }\\n\\n  \" + SAMPLE_1D_SNIPPET + \"\\n  \" + SAMPLE_2D_SNIPPET + \"\\n  \" + SAMPLE_3D_SNIPPET + \"\\n  \" + SAMPLE_4D_SNIPPET + \"\\n  \" + SAMPLE_5D_SNIPPET + \"\\n  \" + SAMPLE_6D_SNIPPET + \"\\n\";\nfunction getOutputScalarCoords() {\n    return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + texShape[1] + \".0);\\n      }\\n    \";\n    }\n    if (texShape[1] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + texShape[0] + \".0);\\n      }\\n    \";\n    }\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      return resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n    }\\n  \";\n}\nfunction getOutput3DCoords(shape, texShape) {\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n      int c = index / \" + stride1 + \";\\n      int d = index - c * \" + stride1 + \";\\n      return ivec3(r, c, d);\\n    }\\n  \";\n}\nfunction getOutput4DCoords(shape, texShape) {\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n\\n      int c = index / \" + stride1 + \";\\n      index -= c * \" + stride1 + \";\\n\\n      int d = index / \" + stride2 + \";\\n      int d2 = index - d * \" + stride2 + \";\\n\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n}\nfunction getOutput5DCoords(shape, texShape) {\n    var stride3 = shape[4];\n    var stride2 = shape[3] * stride3;\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\" + texShape[0] + \",\\n                             \" + texShape[1] + \"));\\n\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n\\n      int c = index / \" + stride1 + \";\\n      index -= c * \" + stride1 + \";\\n\\n      int d = index / \" + stride2 + \";\\n      index -= d * \" + stride2 + \";\\n\\n      int d2 = index  / \" + stride3 + \";\\n      int d3 = index - d2 * \" + stride3 + \";\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \";\n}\nfunction getOutput6DCoords(shape, texShape) {\n    var stride4 = shape[5];\n    var stride3 = shape[4] * stride4;\n    var stride2 = shape[3] * stride3;\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n\\n      int c = index / \" + stride1 + \";\\n      index -= c * \" + stride1 + \";\\n\\n      int d = index / \" + stride2 + \";\\n      index -= d * \" + stride2 + \";\\n\\n      int d2 = index / \" + stride3 + \";\\n      index -= d2 * \" + stride3 + \";\\n\\n      int d3 = index / \" + stride4 + \";\\n      int d4 = index - d3 * \" + stride4 + \";\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \";\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      return 2 * ivec2(resultUV.yx * vec2(\" + Math.ceil(texShape[0] / 2) + \", \" + Math.ceil(texShape[1] / 2) + \"));\\n    }\\n  \";\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      }\\n    \";\n    }\n    if (shape[1] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    if (shape[0] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + shape[1] + \";\\n      int c = index - r * \" + shape[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n}\nfunction getSamplerScalar(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return \"float \" + funcName + \"() {return \" + texName + \";}\";\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      return sampleTexture(\" + texName + \", halfCR);\\n    }\\n  \";\n}\nfunction getSampler1D(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"(int index) {\\n      return \" + funcName + \"Flat(index);\\n    }\\n  \";\n}\nfunction getSampler2D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        var texNumR_1 = texShape[0];\n        var texNumC_1 = texShape[1];\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + texNumC_1 + \".0, \" + texNumR_1 + \".0);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        return \"\\n      float \" + funcName + \"(int row, int col) {\\n        int index = row * \" + shape[1] + \" + col;\\n        return \" + funcName + \"Flat(index);\\n      }\\n    \";\n    }\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (texNumC === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + texNumR + \".0);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    if (texNumR === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2((float(index) + 0.5) / \" + texNumC + \".0, 0.5);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n  float \" + funcName + \"(int row, int col) {\\n    vec2 uv = UVfrom2D(\" + texNumR + \", \" + texNumC + \", \" + shape[1] + \", row, col);\\n    return sampleTexture(\" + texName + \", uv);\\n  }\\n\";\n}\nfunction getSampler3D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col', 'depth'];\n        return \"\\n        \" + getSamplerFromInInfo(newInputInfo) + \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n        }\\n      \";\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        int index = row * \" + stride0 + \" + col * \" + stride1 + \" + depth;\\n        return \" + funcName + \"Flat(index);\\n      }\\n    \";\n    }\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (texNumC === stride0) {\n        return \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          int texR = row;\\n          int texC = col * \" + stride1 + \" + depth;\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n          return sampleTexture(\" + texName + \", uv);\\n        }\\n      \";\n    }\n    if (texNumC === stride1) {\n        return \"\\n    float \" + funcName + \"(int row, int col, int depth) {\\n      int texR = row * \" + shape[1] + \" + col;\\n      int texC = depth;\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        vec2 uv = UVfrom3D(\\n            \" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \", row, col, depth);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n  \";\n}\nfunction getSampler4D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    if (newShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        var params = ['row', 'col', 'depth', 'depth2'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int index = row * \" + stride0 + \" + col * \" + stride1 + \" +\\n            depth * \" + stride2 + \" + depth2;\\n        return \" + funcName + \"Flat(index);\\n      }\\n    \";\n    }\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (texNumC === stride0) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row;\\n        int texC = col * \" + stride1 + \" + depth * \" + stride2 + \" + depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (texNumC === stride2) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row * \" + shape[1] * shape[2] + \" + col * \" + shape[2] + \" + depth;\\n        int texC = depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n      vec2 uv = UVfrom4D(\" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \",\\n          \" + stride2 + \", row, col, depth, depth2);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getSampler5D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var stride3 = shape[4];\n    var stride2 = shape[3] * stride3;\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    if (newShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        var params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        int index = row * \" + stride0 + \" + col * \" + stride1 + \" +\\n            depth * \" + stride2 + \" + depth2 * \" + stride3 + \" + depth3;\\n        return \" + funcName + \"Flat(index);\\n      }\\n    \";\n    }\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (texNumC === stride0) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        int texC = col * \" + stride1 + \" + depth * \" + stride2 + \" +\\n                   depth2 * \" + stride3 + \" + depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (texNumC === stride3) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row * \" + shape[1] * shape[2] + \" + col * \" + shape[2] + \" +\\n                   depth * \" + shape[3] + \" + depth2;\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2, int depth3) {\\n      vec2 uv = UVfrom5D(\" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \",\\n          \" + stride2 + \", \" + stride3 + \", row, col, depth, depth2, depth3);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getSampler6D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var stride4 = shape[5];\n    var stride3 = shape[4] * stride4;\n    var stride2 = shape[3] * stride3;\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    if (newShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = row * \" + stride0 + \" + col * \" + stride1 + \" +\\n            depth * \" + stride2 + \" + depth2 * \" + stride3 + \" + depth3 * \" + stride3 + \"\\n            + depth4\\n        return \" + funcName + \"Flat(index);\\n      }\\n    \";\n    }\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (texNumC === stride0) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        int texC = col * \" + stride1 + \" + depth * \" + stride2 + \" + depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (texNumC === stride4) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row * \" + shape[1] * shape[2] + \" + col * \" + shape[2] + \" + depth;\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      vec2 uv = UVfrom6D(\" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \",\\n          \" + stride2 + \", \" + stride3 + \", \" + stride4 + \"\\n          ,row, col, depth, depth2, depth3, depth4);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getSamplerFlat(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1) + 'Flat';\n    var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inputInfo.shapeInfo.isUniform) {\n        if (inSize === 1) {\n            return \"float \" + funcName + \"(int index) {return \" + texName + \";}\";\n        }\n        return \"\\n      float \" + funcName + \"(int index) {\\n        for (int i = 0; i < \" + inSize + \"; i++) {\\n          if (i == index) {\\n            return \" + texName + \"[i];\\n          }\\n        }\\n      }\\n    \";\n    }\n    var texShape = inputInfo.shapeInfo.texShape;\n    var tNumR = texShape[0];\n    var tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        return sampleTexture(\" + texName + \", halfCR);\\n      }\\n    \";\n    }\n    if (tNumC === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + tNumR + \".0);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2((float(index) + 0.5) / \" + tNumC + \".0, 0.5);\\n        return sampleTexture(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int index) {\\n      vec2 uv = UVfrom1D(\" + tNumR + \", \" + tNumC + \", index);\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName) {\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var type = 'int';\n    if (outRank === 2) {\n        type = 'ivec2';\n    }\n    else if (outRank === 3) {\n        type = 'ivec3';\n    }\n    else if (outRank === 4) {\n        type = 'ivec4';\n    }\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var rankDiff = outRank - inRank;\n    var coordsSnippet;\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(function (d) { return \"coords[\" + (d + rankDiff) + \"] = 0;\"; }).join('\\n');\n    }\n    var unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map(function (s, i) { return \"coords[\" + (i + rankDiff) + \"]\"; })\n            .join(', ');\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      \" + type + \" coords = getOutputCoords();\\n      \" + coordsSnippet + \"\\n      return get\" + texFuncSnippet + \"(\" + unpackedCoordsSnippet + \");\\n    }\\n  \";\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo, supportsBroadcasting) {\n    var texName = inputInfo.name;\n    var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var doBroadcast = supportsBroadcasting && ((outRank > inRank) || broadcastDims.length > 0);\n    var broadcastOverOuter = broadcast_util.broadcastDimsAreOuter(broadcastDims);\n    var isUniform = inputInfo.shapeInfo.isUniform;\n    if (doBroadcast && !broadcastOverOuter) {\n        return getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName);\n    }\n    var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    var broadcastSnippet = '';\n    if (doBroadcast && broadcastOverOuter) {\n        broadcastSnippet = \"\\n        int mainPart = index / \" + inSize + \";\\n        index -= mainPart * \" + inSize + \";\\n      \";\n    }\n    var outTexShape = outShapeInfo.texShape;\n    if (isUniform) {\n        if (inSize === 1) {\n            return \"float \" + funcName + \"() {return \" + texName + \";}\";\n        }\n        return \"\\n      float \" + funcName + \"() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                              vec2(\" + outTexShape[0] + \", \" + outTexShape[1] + \"));\\n        int index = resTexRC.x * \" + outTexShape[1] + \" + resTexRC.y;\\n        \" + broadcastSnippet + \"\\n        return get\" + texFuncSnippet + \"Flat(index);\\n      }\\n    \";\n    }\n    var inTexShape = inputInfo.shapeInfo.texShape;\n    if (util.arraysEqual(inTexShape, outTexShape)) {\n        return \"\\n      float \" + funcName + \"() {\\n        return sampleTexture(\" + texName + \", resultUV);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + outTexShape[0] + \", \" + outTexShape[1] + \"));\\n      int index = resTexRC.x * \" + outTexShape[1] + \" + resTexRC.y;\\n      \" + broadcastSnippet + \"\\n      int texR = index / \" + inTexShape[1] + \";\\n      int texC = index - texR * \" + inTexShape[1] + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) /\\n                 vec2(\" + inTexShape[1] + \".0, \" + inTexShape[0] + \".0);\\n\\n      return sampleTexture(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(\"GPU for rank \" + rank + \" is not yet supported\");\n    }\n}\nexports.getCoordsDataType = getCoordsDataType;\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(function (d) { return params[d]; }).join(', ');\n}\n"},"sourceMaps":{"js":{"version":3,"file":"shader_compiler.js","sourceRoot":"","sources":["../../../src/kernels/webgl/shader_compiler.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"5db77916277d01ee530fc702ba509e87","cacheData":{"env":{}}}