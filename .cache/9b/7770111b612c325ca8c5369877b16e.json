{"id":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/texture_manager.js","dependencies":[{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\texture_manager.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\htr-final\\package.json","includedInParent":true,"mtime":1603094551417},{"name":"E:\\htr-final\\.babelrc","includedInParent":true,"mtime":1603022514142},{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1603088140582},{"name":"../../environment","loc":{"line":3,"column":28},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\texture_manager.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\environment.js"},{"name":"./tex_util","loc":{"line":4,"column":25},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\texture_manager.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernels\\webgl\\tex_util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../../environment\");\nvar tex_util_1 = require(\"./tex_util\");\nvar TextureManager = (function () {\n    function TextureManager(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.usedTextures = {};\n    }\n    TextureManager.prototype.acquireTexture = function (shapeRC, usage) {\n        var physicalTexType = getPhysicalFromLogicalTextureType(usage);\n        var shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextures)) {\n            this.usedTextures[shapeKey] = [];\n        }\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this.log();\n            var newTexture_1 = this.freeTextures[shapeKey].shift();\n            this.usedTextures[shapeKey].push(newTexture_1);\n            return newTexture_1;\n        }\n        this.numUsedTextures++;\n        this.log();\n        var newTexture;\n        if (physicalTexType === tex_util_1.PhysicalTextureType.PACKED_2X2_FLOAT32) {\n            newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === tex_util_1.PhysicalTextureType.UNPACKED_FLOAT32) {\n            newTexture =\n                this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === tex_util_1.PhysicalTextureType.UNPACKED_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === tex_util_1.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n            newTexture =\n                this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        this.usedTextures[shapeKey].push(newTexture);\n        return newTexture;\n    };\n    TextureManager.prototype.releaseTexture = function (texture, shape, logicalTexType) {\n        var physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType);\n        var shapeKey = getKeyFromTextureShape(shape, physicalTexType);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        this.freeTextures[shapeKey].push(texture);\n        this.numFreeTextures++;\n        this.numUsedTextures--;\n        var texList = this.usedTextures[shapeKey];\n        var texIndex = texList.indexOf(texture);\n        if (texIndex < 0) {\n            throw new Error('Cannot release a texture that was never provided by this ' +\n                'texture manager');\n        }\n        texList.splice(texIndex, 1);\n        this.log();\n    };\n    TextureManager.prototype.log = function () {\n        if (!this.logEnabled) {\n            return;\n        }\n        var total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + total + \")\");\n    };\n    TextureManager.prototype.getNumUsedTextures = function () {\n        return this.numUsedTextures;\n    };\n    TextureManager.prototype.getNumFreeTextures = function () {\n        return this.numFreeTextures;\n    };\n    TextureManager.prototype.dispose = function () {\n        var _this = this;\n        if (this.freeTextures == null) {\n            return;\n        }\n        for (var texShape in this.freeTextures) {\n            this.freeTextures[texShape].forEach(function (tex) {\n                _this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        for (var texShape in this.usedTextures) {\n            this.usedTextures[texShape].forEach(function (tex) {\n                _this.gpgpu.deleteMatrixTexture(tex);\n            });\n        }\n        this.freeTextures = null;\n        this.usedTextures = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n    };\n    return TextureManager;\n}());\nexports.TextureManager = TextureManager;\nfunction getPhysicalFromLogicalTextureType(logicalTexType) {\n    if (logicalTexType === tex_util_1.TextureUsage.DOWNLOAD ||\n        logicalTexType === tex_util_1.TextureUsage.PIXELS) {\n        return tex_util_1.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n    }\n    else if (logicalTexType === tex_util_1.TextureUsage.UPLOAD) {\n        return tex_util_1.PhysicalTextureType.UNPACKED_FLOAT32;\n    }\n    else if (logicalTexType === tex_util_1.TextureUsage.RENDER) {\n        return environment_1.ENV.get('WEBGL_RENDER_FLOAT32_ENABLED') ?\n            tex_util_1.PhysicalTextureType.UNPACKED_FLOAT32 :\n            tex_util_1.PhysicalTextureType.UNPACKED_FLOAT16;\n    }\n    else if (logicalTexType === tex_util_1.TextureUsage.PACK) {\n        return tex_util_1.PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    throw new Error(\"Unknown logical texture type \" + logicalTexType);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType) {\n    return shapeRowsCol[0] + \"_\" + shapeRowsCol[1] + \"_\" + physicalTexType;\n}\n"},"sourceMaps":{"js":{"version":3,"file":"texture_manager.js","sourceRoot":"","sources":["../../../src/kernels/webgl/texture_manager.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"e41f61d614e7e9516605ae761a3d5b32","cacheData":{"env":{}}}