{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","dependencies":[{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js.map","includedInParent":true,"mtime":499162500000},{"name":"E:\\htr-final\\package.json","includedInParent":true,"mtime":1603094551417},{"name":"E:\\htr-final\\.babelrc","includedInParent":true,"mtime":1603022514142},{"name":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1603088140582},{"name":"../environment","loc":{"line":3,"column":28},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\environment.js"},{"name":"../tensor_util_env","loc":{"line":4,"column":32},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\tensor_util_env.js"},{"name":"../util","loc":{"line":5,"column":19},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\util.js"},{"name":"./array_ops","loc":{"line":6,"column":26},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\array_ops.js"},{"name":"./broadcast_util","loc":{"line":7,"column":31},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\broadcast_util.js"},{"name":"./operation","loc":{"line":8,"column":26},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\operation.js"},{"name":"./tensor_ops","loc":{"line":9,"column":27},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\tensor_ops.js"},{"name":"./unary_ops","loc":{"line":10,"column":26},"parent":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\batchnorm.js","resolved":"E:\\htr-final\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\unary_ops.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar tensor_util_env_1 = require(\"../tensor_util_env\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar broadcast_util_1 = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar tensor_ops_1 = require(\"./tensor_ops\");\nvar unary_ops_1 = require(\"./unary_ops\");\nfunction batchNormalization2d_(x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'batchNormalization');\n    var $mean = tensor_util_env_1.convertToTensor(mean, 'mean', 'batchNormalization');\n    var $variance = tensor_util_env_1.convertToTensor(variance, 'variance', 'batchNormalization');\n    var $scale;\n    if (scale != null) {\n        $scale = tensor_util_env_1.convertToTensor(scale, 'scale', 'batchNormalization');\n    }\n    var $offset;\n    if (offset != null) {\n        $offset = tensor_util_env_1.convertToTensor(offset, 'offset', 'batchNormalization');\n    }\n    util.assert($x.rank === 2, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\n        ($x.rank + \".\"));\n    util.assert($mean.rank === 2 || $mean.rank === 1, \"Error in batchNormalization2D: mean must be rank 2 or rank 1 but \" +\n        (\"got rank \" + $mean.rank + \".\"));\n    util.assert($variance.rank === 2 || $variance.rank === 1, \"Error in batchNormalization2D: variance must be rank 2 or rank 1 \" +\n        (\"but got rank \" + $variance.rank + \".\"));\n    if ($scale != null) {\n        util.assert($scale.rank === 2 || $scale.rank === 1, \"Error in batchNormalization2D: scale must be rank 2 or rank 1 \" +\n            (\"but got rank \" + $scale.rank + \".\"));\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 2 || $offset.rank === 1, \"Error in batchNormalization2D: offset must be rank 2 or rank 1 \" +\n            (\"but got rank \" + $offset.rank + \".\"));\n    }\n    return exports.batchNormalization($x, $mean, $variance, varianceEpsilon, $scale, $offset);\n}\nfunction batchNormalization3d_(x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'batchNormalization');\n    var $mean = tensor_util_env_1.convertToTensor(mean, 'mean', 'batchNormalization');\n    var $variance = tensor_util_env_1.convertToTensor(variance, 'variance', 'batchNormalization');\n    var $scale;\n    if (scale != null) {\n        $scale = tensor_util_env_1.convertToTensor(scale, 'scale', 'batchNormalization');\n    }\n    var $offset;\n    if (offset != null) {\n        $offset = tensor_util_env_1.convertToTensor(offset, 'offset', 'batchNormalization');\n    }\n    util.assert($x.rank === 3, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\n        ($x.rank + \".\"));\n    util.assert($mean.rank === 3 || $mean.rank === 1, \"Error in batchNormalization3D: mean must be rank 3 or rank 1 but \" +\n        (\"got rank \" + $mean.rank + \".\"));\n    util.assert($variance.rank === 3 || $variance.rank === 1, \"Error in batchNormalization3D: variance must be rank 3 or rank 1 \" +\n        (\"but got rank \" + $variance.rank + \".\"));\n    if ($scale != null) {\n        util.assert($scale.rank === 3 || $scale.rank === 1, \"Error in batchNormalization3D: scale must be rank 3 or rank 1 \" +\n            (\"but got rank \" + $scale.rank + \".\"));\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 3 || $offset.rank === 1, \"Error in batchNormalization3D: offset must be rank 3 or rank 1 \" +\n            (\"but got rank \" + $offset.rank + \".\"));\n    }\n    return exports.batchNormalization($x, $mean, $variance, varianceEpsilon, $scale, $offset);\n}\nfunction batchNormalization4d_(x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'batchNormalization');\n    var $mean = tensor_util_env_1.convertToTensor(mean, 'mean', 'batchNormalization');\n    var $variance = tensor_util_env_1.convertToTensor(variance, 'variance', 'batchNormalization');\n    var $scale;\n    if (scale != null) {\n        $scale = tensor_util_env_1.convertToTensor(scale, 'scale', 'batchNormalization');\n    }\n    var $offset;\n    if (offset != null) {\n        $offset = tensor_util_env_1.convertToTensor(offset, 'offset', 'batchNormalization');\n    }\n    util.assert($x.rank === 4, \"Error in batchNormalization4D: x must be rank 4 but got rank \" +\n        ($x.rank + \".\"));\n    util.assert($mean.rank === 4 || $mean.rank === 1, \"Error in batchNormalization4D: mean must be rank 4 or rank 1 but \" +\n        (\"got rank \" + $mean.rank + \".\"));\n    util.assert($variance.rank === 4 || $variance.rank === 1, \"Error in batchNormalization4D: variance must be rank 4 or rank 1 \" +\n        (\"but got rank \" + $variance.rank + \".\"));\n    if ($scale != null) {\n        util.assert($scale.rank === 4 || $scale.rank === 1, \"Error in batchNormalization4D: scale must be rank 4 or rank 1 \" +\n            (\"but got rank \" + $scale.rank + \".\"));\n    }\n    if ($offset != null) {\n        util.assert($offset.rank === 4 || $offset.rank === 1, \"Error in batchNormalization4D: offset must be rank 4 or rank 1 \" +\n            (\"but got rank \" + $offset.rank + \".\"));\n    }\n    return exports.batchNormalization($x, $mean, $variance, varianceEpsilon, $scale, $offset);\n}\nfunction batchNormalization_(x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n    var $x = tensor_util_env_1.convertToTensor(x, 'x', 'batchNormalization');\n    var $mean = tensor_util_env_1.convertToTensor(mean, 'mean', 'batchNormalization');\n    var $variance = tensor_util_env_1.convertToTensor(variance, 'variance', 'batchNormalization');\n    var $scale;\n    if (scale != null) {\n        $scale = tensor_util_env_1.convertToTensor(scale, 'scale', 'batchNormalization');\n    }\n    var $offset;\n    if (offset != null) {\n        $offset = tensor_util_env_1.convertToTensor(offset, 'offset', 'batchNormalization');\n    }\n    util.assert($mean.rank === $variance.rank, 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert($offset == null || $mean.rank === $offset.rank, 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert($scale == null || $mean.rank === $scale.rank, 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    var x4D;\n    if ($x.rank === 0 || $x.rank === 1) {\n        x4D = $x.as4D(1, 1, 1, $x.size);\n    }\n    else if ($x.rank === 2) {\n        x4D = $x.as4D(1, 1, $x.shape[0], $x.shape[1]);\n    }\n    else if ($x.rank === 3) {\n        x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n    }\n    else {\n        x4D = $x;\n    }\n    var der = function (dy) {\n        var scaleValue = $scale == null ? tensor_ops_1.scalar(1) : $scale;\n        var reductionAxes = broadcast_util_1.getReductionAxes($mean.shape, x4D.shape);\n        var tileShape = [];\n        if ($mean.rank === 1) {\n            for (var i = 0; i < x4D.shape.length - 1; ++i) {\n                tileShape.push(x4D.shape[i]);\n            }\n            tileShape.push(1);\n        }\n        var xMinusMean = $x.sub($mean);\n        var dyTimesScaleValue = dy.mul(scaleValue);\n        var oneOverSqrtVariance = unary_ops_1.rsqrt($variance.add(tensor_ops_1.scalar(varianceEpsilon)));\n        var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)\n            .mul(oneOverSqrtVariance)\n            .mul(tensor_ops_1.scalar(-0.5));\n        var derX = function () {\n            if ($mean.rank === 1) {\n                return dy\n                    .mul(array_ops_1.tile(oneOverSqrtVariance.as4D(1, 1, 1, $mean.shape[0]), tileShape))\n                    .mul(scaleValue)\n                    .reshape($x.shape);\n            }\n            else {\n                return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape($x.shape);\n            }\n        };\n        var derMean = function () {\n            var meanDer = oneOverSqrtVariance.mul(tensor_ops_1.scalar(-1)).mul(dyTimesScaleValue);\n            if ($mean.rank === 1) {\n                meanDer = meanDer.sum(reductionAxes);\n            }\n            return meanDer.reshape($mean.shape);\n        };\n        var derVariance = function () {\n            var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\n            if ($mean.rank === 1) {\n                varianceDer = varianceDer.sum(reductionAxes);\n            }\n            return varianceDer.reshape($mean.shape);\n        };\n        var derScale = function () {\n            var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\n            var scaleDer = dy.mul(xMinusMean2TimesRsqrt);\n            if ($mean.rank === 1) {\n                scaleDer = scaleDer.sum(reductionAxes);\n            }\n            return scaleDer.reshape($mean.shape);\n        };\n        var derOffset = function () {\n            var offsetDer = dy;\n            if ($mean.rank === 1) {\n                offsetDer = offsetDer.sum(reductionAxes);\n            }\n            return offsetDer.reshape($mean.shape);\n        };\n        return {\n            $x: derX,\n            $mean: derMean,\n            $variance: derVariance,\n            $scale: derScale,\n            $offset: derOffset\n        };\n    };\n    var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.batchNormalization(x4D, batchnormReshape4D($mean), batchnormReshape4D($variance), varianceEpsilon, batchnormReshape4D($scale), batchnormReshape4D($offset)); }, { $x: $x, $mean: $mean, $variance: $variance, $scale: $scale, $offset: $offset }, der);\n    return res.reshape($x.shape);\n}\nfunction batchnormReshape4D(x) {\n    if (x == null) {\n        return null;\n    }\n    if (x.rank === 0) {\n        return x.as1D();\n    }\n    else if (x.rank === 1) {\n        return x;\n    }\n    else if (x.rank === 2) {\n        return x.as4D(1, 1, x.shape[0], x.shape[1]);\n    }\n    else if (x.rank === 3) {\n        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    return x;\n}\nexports.batchNormalization2d = operation_1.op({ batchNormalization2d_: batchNormalization2d_ });\nexports.batchNormalization3d = operation_1.op({ batchNormalization3d_: batchNormalization3d_ });\nexports.batchNormalization4d = operation_1.op({ batchNormalization4d_: batchNormalization4d_ });\nexports.batchNormalization = operation_1.op({ batchNormalization_: batchNormalization_ });\n"},"sourceMaps":{"js":{"version":3,"file":"batchnorm.js","sourceRoot":"","sources":["../../src/ops/batchnorm.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"c2352e79f75fb414850d555ecf67e2b7","cacheData":{"env":{}}}